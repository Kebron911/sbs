{
  "name": "SBS System Orchestrator",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sbs-system-update",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-system-update",
      "name": "Webhook - System Update",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 400],
      "webhookId": "sbs-orchestrator-webhook"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT s.*, \n  ss.step, \n  ss.status as step_status,\n  ss.id as step_id\nFROM systems s\nLEFT JOIN system_steps ss ON s.id = ss.system_id\nWHERE s.id = $1\nAND ss.status = 'pending'\nORDER BY \n  CASE ss.step\n    WHEN 'define' THEN 1\n    WHEN 'design' THEN 2\n    WHEN 'build' THEN 3\n    WHEN 'automate' THEN 4\n    WHEN 'review' THEN 5\n  END\nLIMIT 1;",
        "additionalFields": {
          "queryParameters": "={{ [$json.body.id || $json.body.system_id] }}"
        }
      },
      "id": "get-current-step",
      "name": "Get Current Pending Step",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [450, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL SBS"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.step }}",
              "value2": "design"
            }
          ]
        }
      },
      "id": "check-step-type",
      "name": "Route to Step Handler",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [650, 400],
      "parameters": {
        "rules": {
          "rules": [
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.step }}",
                    "value2": "design"
                  }
                ]
              },
              "renameOutput": "Design"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.step }}",
                    "value2": "build"
                  }
                ]
              },
              "renameOutput": "Build"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.step }}",
                    "value2": "automate"
                  }
                ]
              },
              "renameOutput": "Automate"
            },
            {
              "conditions": {
                "string": [
                  {
                    "value1": "={{ $json.step }}",
                    "value2": "review"
                  }
                ]
              },
              "renameOutput": "Review"
            }
          ]
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO system_logs (system_id, event, details)\nVALUES ($1, 'design_canvas_generated', jsonb_build_object(\n  'name', $2,\n  'timestamp', NOW(),\n  'canvas_template', 'markdown'\n))\nRETURNING *;",
        "additionalFields": {
          "queryParameters": "={{ [$json.id, $json.name] }}"
        }
      },
      "id": "design-handler",
      "name": "Design Handler - Generate Canvas",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [850, 200],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL SBS"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $env.TELEGRAM_CHAT_ID }}"
            },
            {
              "name": "text",
              "value": "=üîß *Build Phase Started*\n\nSystem: *{{ $json.name }}*\n\nüìÅ Creating folders and database schemas\nüîó Setting up API integrations\n‚öôÔ∏è Scaffolding automation structure"
            },
            {
              "name": "parse_mode",
              "value": "Markdown"
            }
          ]
        },
        "options": {}
      },
      "id": "build-handler",
      "name": "Build Handler - Create Infrastructure",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [850, 350],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO system_logs (system_id, event, details)\nVALUES ($1, 'automation_configured', jsonb_build_object(\n  'triggers_added', true,\n  'schedules_created', true,\n  'timestamp', NOW()\n))\nRETURNING *;",
        "additionalFields": {
          "queryParameters": "={{ [$json.id] }}"
        }
      },
      "id": "automate-handler",
      "name": "Automate Handler - Setup Triggers",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [850, 500],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL SBS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO system_logs (system_id, event, details)\nVALUES ($1, 'review_scheduled', jsonb_build_object(\n  'next_review', NOW() + interval '30 days',\n  'review_frequency', 'monthly',\n  'timestamp', NOW()\n))\nRETURNING *;",
        "additionalFields": {
          "queryParameters": "={{ [$json.id] }}"
        }
      },
      "id": "review-handler",
      "name": "Review Handler - Schedule Review",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [850, 650],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL SBS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE system_steps\nSET status = 'complete',\n    updated_at = NOW()\nWHERE id = $1\nRETURNING *;",
        "additionalFields": {
          "queryParameters": "={{ [$json.step_id] }}"
        }
      },
      "id": "mark-step-complete",
      "name": "Mark Step Complete",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1050, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL SBS"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE systems\nSET current_stage = (\n  SELECT step FROM system_steps\n  WHERE system_id = $1\n  AND status = 'pending'\n  ORDER BY \n    CASE step\n      WHEN 'define' THEN 1\n      WHEN 'design' THEN 2\n      WHEN 'build' THEN 3\n      WHEN 'automate' THEN 4\n      WHEN 'review' THEN 5\n    END\n  LIMIT 1\n)\nWHERE id = $1\nRETURNING *;",
        "additionalFields": {
          "queryParameters": "={{ [$json.id || $json.system_id] }}"
        }
      },
      "id": "update-system-stage",
      "name": "Update System Stage",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1250, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL SBS"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": true,\n  \"system_id\": $json.id,\n  \"step_completed\": $json.step,\n  \"next_stage\": $json.current_stage\n} }}",
        "options": {}
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1450, 400]
    }
  ],
  "connections": {
    "Webhook - System Update": {
      "main": [
        [
          {
            "node": "Get Current Pending Step",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Current Pending Step": {
      "main": [
        [
          {
            "node": "Route to Step Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Step Handler": {
      "main": [
        [
          {
            "node": "Design Handler - Generate Canvas",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Build Handler - Create Infrastructure",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Automate Handler - Setup Triggers",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Review Handler - Schedule Review",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Design Handler - Generate Canvas": {
      "main": [
        [
          {
            "node": "Mark Step Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Handler - Create Infrastructure": {
      "main": [
        [
          {
            "node": "Mark Step Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Automate Handler - Setup Triggers": {
      "main": [
        [
          {
            "node": "Mark Step Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Review Handler - Schedule Review": {
      "main": [
        [
          {
            "node": "Mark Step Complete",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark Step Complete": {
      "main": [
        [
          {
            "node": "Update System Stage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update System Stage": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "America/Denver"
  },
  "tags": []
}