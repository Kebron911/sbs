{
  "name": "SUBFLOW: AI Content Generation",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "subflow-ai-content",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook_ai_content",
      "name": "Webhook - AI Content",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300],
      "webhookId": "subflow-ai-content"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "content_type",
              "name": "contentType",
              "value": "={{ $json.body.content_type }}",
              "type": "string"
            },
            {
              "id": "prompt",
              "name": "prompt",
              "value": "={{ $json.body.prompt }}",
              "type": "string"
            },
            {
              "id": "context_data",
              "name": "contextData",
              "value": "={{ $json.body.context_data || {} }}",
              "type": "object"
            },
            {
              "id": "ai_provider",
              "name": "aiProvider",
              "value": "={{ $json.body.ai_provider || 'openai' }}",
              "type": "string"
            },
            {
              "id": "model",
              "name": "model",
              "value": "={{ $json.body.model || 'gpt-4' }}",
              "type": "string"
            },
            {
              "id": "max_tokens",
              "name": "maxTokens",
              "value": "={{ $json.body.max_tokens || 2000 }}",
              "type": "number"
            },
            {
              "id": "temperature",
              "name": "temperature",
              "value": "={{ $json.body.temperature || 0.7 }}",
              "type": "number"
            },
            {
              "id": "character_id",
              "name": "characterId",
              "value": "={{ $json.body.character_id }}",
              "type": "number"
            },
            {
              "id": "user_id",
              "name": "userId",
              "value": "={{ $json.body.user_id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare_ai_request",
      "name": "Prepare AI Request",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "const requestData = $json;\nconst contentType = requestData.contentType;\nconst userPrompt = requestData.prompt;\nconst contextData = requestData.contextData;\n\nconst contentTemplates = {\n  skill_suggestion: {\n    systemMessage: \"You are an expert life coach. Suggest practical, achievable skills.\",\n    promptTemplate: \"Based on context, suggest 3-5 relevant skills. User request: \" + userPrompt + \". Format as JSON array.\"\n  },\n  habit_suggestion: {\n    systemMessage: \"You are a behavioral psychology expert. Suggest specific, actionable habits.\",\n    promptTemplate: \"Based on context, suggest 3-5 keystone habits. User request: \" + userPrompt + \". Format as JSON array.\"\n  },\n  routine_creation: {\n    systemMessage: \"You are a productivity expert. Design practical, sustainable routines.\",\n    promptTemplate: \"Design a comprehensive routine. User request: \" + userPrompt + \". Format as JSON object.\"\n  },\n  achievement_description: {\n    systemMessage: \"You are a gamification expert. Create engaging achievement descriptions.\",\n    promptTemplate: \"Create an achievement description. User request: \" + userPrompt + \". Format as JSON object.\"\n  },\n  system_analysis: {\n    systemMessage: \"You are a systems thinking expert. Analyze and provide strategic insights.\",\n    promptTemplate: \"Analyze the system and provide insights. User request: \" + userPrompt + \". Format as JSON object.\"\n  },\n  content_generation: {\n    systemMessage: \"You are a versatile content creator. Generate high-quality written content.\",\n    promptTemplate: \"Generate content: \" + userPrompt\n  }\n};\n\nconst template = contentTemplates[contentType] || contentTemplates.content_generation;\n\nreturn {\n  json: {\n    systemMessage: template.systemMessage,\n    prompt: template.promptTemplate,\n    contentType: contentType,\n    aiProvider: requestData.aiProvider,\n    model: requestData.model,\n    maxTokens: requestData.maxTokens,\n    temperature: requestData.temperature,\n    characterId: requestData.characterId,\n    userId: requestData.userId\n  }\n};"
      },
      "id": "build_ai_prompt",
      "name": "Build AI Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is_openai",
              "leftValue": "={{ $json.aiProvider }}",
              "rightValue": "openai",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ]
        }
      },
      "id": "check_ai_provider",
      "name": "Check AI Provider",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "chatId": "ai-content-generation",
        "options": {
          "systemMessage": "={{ $json.systemMessage }}",
          "maxTokens": "={{ $json.maxTokens }}",
          "temperature": "={{ $json.temperature }}"
        },
        "prompt": "={{ $json.prompt }}"
      },
      "id": "call_openai",
      "name": "Call OpenAI",
      "type": "@n8n/n8n-nodes-langchain.chatOpenAi",
      "typeVersion": 1,
      "position": [1050, 200],
      "credentials": {
        "openAiApi": {
          "id": "1",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "model": "claude-3-5-sonnet-20241022",
        "options": {
          "systemMessage": "={{ $('Build AI Prompt').item.json.systemMessage }}",
          "maxTokens": "={{ $('Build AI Prompt').item.json.maxTokens }}",
          "temperature": "={{ $('Build AI Prompt').item.json.temperature }}"
        },
        "prompt": "={{ $('Build AI Prompt').item.json.prompt }}"
      },
      "id": "call_claude",
      "name": "Call Claude",
      "type": "@n8n/n8n-nodes-langchain.chatAnthropic",
      "typeVersion": 1,
      "position": [1050, 400],
      "credentials": {
        "anthropicApi": {
          "id": "1",
          "name": "Anthropic API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const aiProvider = $('Build AI Prompt').item.json.aiProvider;\nconst contentType = $('Build AI Prompt').item.json.contentType;\n\nlet aiResponse;\nlet responseText;\n\nif (aiProvider === 'openai') {\n  aiResponse = $('Call OpenAI').item.json;\n  responseText = aiResponse.response || aiResponse.text || aiResponse.content || '';\n} else {\n  aiResponse = $('Call Claude').item.json;\n  responseText = aiResponse.response || aiResponse.text || aiResponse.content || '';\n}\n\nconst structuredTypes = ['skill_suggestion', 'habit_suggestion', 'routine_creation', 'achievement_description', 'system_analysis'];\nlet parsedContent = null;\n\nif (structuredTypes.includes(contentType)) {\n  try {\n    const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\]/);\n    if (jsonMatch) {\n      parsedContent = JSON.parse(jsonMatch[0]);\n    } else {\n      parsedContent = JSON.parse(responseText);\n    }\n  } catch (error) {\n    parsedContent = null;\n  }\n}\n\nconst result = {\n  success: true,\n  content_type: contentType,\n  ai_provider: aiProvider,\n  raw_response: responseText,\n  parsed_content: parsedContent,\n  is_structured: parsedContent !== null,\n  generated_at: new Date().toISOString(),\n  character_id: $('Build AI Prompt').item.json.characterId,\n  user_id: $('Build AI Prompt').item.json.userId,\n  token_usage: {\n    estimated_tokens: Math.ceil(responseText.length / 4),\n    max_tokens: $('Build AI Prompt').item.json.maxTokens\n  }\n};\n\nreturn {\n  json: result\n};"
      },
      "id": "process_ai_response",
      "name": "Process AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "send_ai_content_success",
      "name": "Send AI Content Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": false,\n  \"error\": \"AI request failed\",\n  \"message\": \"Unable to generate content with the specified AI provider\"\n} }}",
        "options": {
          "responseCode": "500"
        }
      },
      "id": "send_ai_error",
      "name": "Send AI Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1250, 500]
    }
  ],
  "connections": {
    "Webhook - AI Content": {
      "main": [
        [
          {
            "node": "Prepare AI Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Request": {
      "main": [
        [
          {
            "node": "Build AI Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build AI Prompt": {
      "main": [
        [
          {
            "node": "Check AI Provider",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check AI Provider": {
      "main": [
        [
          {
            "node": "Call OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Call Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call OpenAI": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Send AI Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call Claude": {
      "main": [
        [
          {
            "node": "Process AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Send AI Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Response": {
      "main": [
        [
          {
            "node": "Send AI Content Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "America/Denver"
  },
  "versionId": "subflow-ai-content-v1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "subflow-ai-content",
  "tags": ["subflow", "ai", "content-generation", "openai", "claude", "reusable"]
}