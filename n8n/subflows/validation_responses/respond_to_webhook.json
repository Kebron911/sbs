{
  "name": "SUBFLOW: Respond to Webhook",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "subflow-respond-to-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook_respond",
      "name": "Webhook - Respond to Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        250,
        300
      ],
      "webhookId": "subflow-respond-to-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "response_body_check",
              "leftValue": "={{ $json.body.response_body }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "validate_response_data",
      "name": "Validate Response Data",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        450,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "response_body",
              "name": "responseBody",
              "value": "={{ $json.body.response_body }}",
              "type": "object"
            },
            {
              "id": "status_code",
              "name": "statusCode",
              "value": "={{ $json.body.status_code || 200 }}",
              "type": "number"
            },
            {
              "id": "response_headers",
              "name": "responseHeaders",
              "value": "={{ $json.body.response_headers || {} }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare_response_data",
      "name": "Prepare Response Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.2,
      "position": [
        650,
        250
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json.responseBody }}",
        "options": {
          "responseCode": "={{ $json.statusCode }}",
          "responseHeaders": "={{ $json.responseHeaders }}"
        }
      },
      "id": "send_successful_response",
      "name": "Send Successful Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        850,
        250
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": false,\n  \"error\": \"Invalid request\",\n  \"message\": \"Missing required response_body parameter\"\n} }}",
        "options": {
          "responseCode": "400"
        }
      },
      "id": "send_error_response",
      "name": "Send Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        650,
        350
      ]
    }
  ],
  "connections": {
    "Webhook - Respond to Request": {
      "main": [
        [
          {
            "node": "Validate Response Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Response Data": {
      "main": [
        [
          {
            "node": "Prepare Response Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response Data": {
      "main": [
        [
          {
            "node": "Send Successful Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "timezone": "America/Denver"
  },
  "tags": [],
  "versionId": "1",
  "meta": {},
  "pinData": {},
  "staticData": null,
  "triggerCount": 0,
  "updatedAt": "2025-10-30T15:57:49.%fZ",
  "createdAt": "2025-10-30T15:57:49.%fZ"
}
