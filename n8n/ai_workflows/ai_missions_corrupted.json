{
  "name": "SBS_AI_MISSIONS",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 6 * * *"
            }
          ]
        }
      },
      "id": "schedule_daily",
      "name": "Schedule - Daily 6 AM",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [250, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT c.id, c.user_id, c.level, c.xp, c.hp, c.coins, c.goals, c.class, u.username FROM characters c JOIN users u ON c.user_id = u.id WHERE c.last_login > NOW() - INTERVAL '7 days'",
        "options": {}
      },
      "id": "fetch_active_users",
      "name": "Fetch Active Users",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [450, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT s.id, s.name, s.category, s.current_stage, s.purpose, COUNT(r.id) as routine_count, ss.step as next_step FROM systems s LEFT JOIN routines r ON s.id = r.system_id LEFT JOIN system_steps ss ON s.id = ss.system_id AND ss.status = 'pending' WHERE s.user_id = (SELECT user_id FROM characters WHERE id = $1) AND s.current_stage != 'complete' GROUP BY s.id, s.name, s.category, s.current_stage, s.purpose, ss.step ORDER BY s.created_at DESC LIMIT 3",
        "additionalFields": {
          "queryParameters": "={{ [$json.id] }}"
        }
      },
      "id": "fetch_active_sbs_systems",
      "name": "Fetch Active SBS Systems",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [450, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "split_users",
      "name": "Split Users",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [550, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $vars.SUBFLOW_BASE_URL }}/webhook/subflow-character-data",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"character_id\": $json.id,\n  \"user_id\": $json.user_id,\n  \"include_skills_details\": true,\n  \"include_habits_details\": true,\n  \"include_systems_details\": false,\n  \"include_routines_details\": false\n} }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "fetch_character_data",
      "name": "Fetch Character Data",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT event_type, COUNT(*) as count, SUM(xp_change) as total_xp FROM events WHERE character_id = $1 AND created_at > NOW() - INTERVAL '7 days' GROUP BY event_type",
        "additionalFields": {
          "queryParameters": "={{ [$json.id] }}"
        }
      },
      "id": "fetch_recent_activity",
      "name": "Fetch Recent Activity",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [650, 450],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT h.name, h.streak FROM habits h WHERE h.character_id = $1 AND h.type = 'good' ORDER BY h.streak DESC LIMIT 5",
        "additionalFields": {
          "queryParameters": "={{ [$json.id] }}"
        }
      },
      "id": "fetch_habit_streaks",
      "name": "Fetch Habit Streaks",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [650, 600],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT p.title, COUNT(t.id) as total_tasks, SUM(CASE WHEN t.completed = true THEN 1 ELSE 0 END) as completed_tasks FROM projects p LEFT JOIN tasks t ON t.project_id = p.id WHERE p.character_id = $1 AND p.completed = false GROUP BY p.id, p.title ORDER BY p.deadline ASC LIMIT 3",
        "additionalFields": {
          "queryParameters": "={{ [$json.id] }}"
        }
      },
      "id": "fetch_active_projects",
      "name": "Fetch Active Projects",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [650, 750],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT r.id, r.name, r.day_of_week, r.description, r.status, s.name as system_name, s.current_stage FROM routines r JOIN systems s ON r.system_id = s.id WHERE s.user_id = (SELECT user_id FROM characters WHERE id = $1) AND r.status = 'active' ORDER BY r.created_at DESC LIMIT 3",
        "additionalFields": {
          "queryParameters": "={{ [$json.id] }}"
        }
      },
      "id": "fetch_sbs_routines",
      "name": "Fetch SBS Routines",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [650, 850],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Combine all user data for AI context with SBS focus using character data subflow\nconst character = $('Split Users').first().json;\nconst characterData = $('Fetch Character Data').first().json.data;\nconst activities = $('Fetch Recent Activity').all().map(item => item.json);\nconst projects = $('Fetch Active Projects').all().map(item => item.json);\nconst sbsSystems = $('Fetch Active SBS Systems').all().map(item => item.json);\nconst sbsRoutines = $('Fetch SBS Routines').all().map(item => item.json);\n\n// Extract skills and habits from character data subflow\nconst topSkills = characterData.skills_details ? characterData.skills_details.slice(0, 3) : [];\nconst habitStreaks = characterData.habits_details ? characterData.habits_details.filter(h => h.type === 'good').slice(0, 5) : [];\n\nconst userContext = {\n  characterId: characterData.character.id,\n  username: character.username,\n  level: characterData.character.level,\n  hp: characterData.character.hp,\n  coins: characterData.character.coins,\n  goals: character.goals,\n  class: character.class,\n  topSkills: topSkills,\n  recentActivity: activities,\n  habitStreaks: habitStreaks,\n  activeProjects: projects,\n  sbsSystems: sbsSystems,\n  sbsRoutines: sbsRoutines\n};\n\nreturn [{ json: { userContext } }];"
      },
      "id": "prepare_ai_context",
      "name": "Prepare AI Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 475]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $vars.SUBFLOW_BASE_URL }}/webhook/subflow-ai-content-generation",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"content_type\": \"sbs_missions\",\n  \"character_id\": $json.userContext.characterId,\n  \"context\": {\n    \"player_info\": {\n      \"username\": $json.userContext.username,\n      \"level\": $json.userContext.level,\n      \"class\": $json.userContext.class,\n      \"hp\": $json.userContext.hp,\n      \"coins\": $json.userContext.coins,\n      \"goals\": $json.userContext.goals || 'Not specified'\n    },\n    \"top_skills\": $json.userContext.topSkills.length > 0 ? $json.userContext.topSkills.map(s => s.name + ' (Lv' + s.level + ')').join(', ') : 'None',\n    \"sbs_systems\": $json.userContext.sbsSystems.length > 0 ? $json.userContext.sbsSystems.map(s => s.name + ' (' + s.current_stage + ' stage, next: ' + (s.next_step || 'complete') + ', category: ' + s.category + ')').join(', ') : 'None',\n    \"active_routines\": $json.userContext.sbsRoutines.length > 0 ? $json.userContext.sbsRoutines.map(r => r.name + ' (system: ' + r.system_name + ', stage: ' + r.current_stage + ')').join(', ') : 'None',\n    \"mission_count\": 3,\n    \"focus\": \"SBS system advancement, routine creation, and system optimization\"\n  }\n} }}",
            },
            {
              "name": "messages",
              "value": "=[{\"role\": \"system\", \"content\": \"You are an AI companion for the SBS (System for Building Systems) productivity framework. Generate 3 SBS-focused missions that help users advance their systems, create routines, or progress through system stages (define â†’ design â†’ build â†’ automate â†’ review). FOCUS ON SBS INTEGRATION - suggest system modifications, routine optimization, or stage advancement rather than generic tasks. Return ONLY a JSON array: [{\\\"type\\\": \\\"sbs_system_advancement\\\"|\\\"sbs_routine_creation\\\"|\\\"sbs_system_optimization\\\", \\\"title\\\": \\\"Mission title\\\", \\\"description\\\": \\\"SBS-specific action\\\", \\\"target_system_id\\\": system_id_or_null, \\\"suggested_routine\\\": \\\"routine_description\\\", \\\"system_category\\\": \\\"category\\\", \\\"stage_focus\\\": \\\"define|design|build|automate|review\\\", \\\"xp\\\": 30, \\\"coins\\\": 15}]\"}, {\"role\": \"user\", \"content\": \"Player: \" + $json.userContext.username + \" (Level \" + $json.userContext.level + \", \" + $json.userContext.class + \")\\nHP: \" + $json.userContext.hp + \"/100, Coins: \" + $json.userContext.coins + \"\\nGoals: \" + ($json.userContext.goals || 'Not specified') + \"\\nTop Skills: \" + ($json.userContext.topSkills.length > 0 ? $json.userContext.topSkills.map(s => s.name + ' (Lv' + s.level + ')').join(', ') : 'None') + \"\\nSBS Systems: \" + ($json.userContext.sbsSystems.length > 0 ? $json.userContext.sbsSystems.map(s => s.name + ' (' + s.current_stage + ' stage, next: ' + (s.next_step || 'complete') + ', category: ' + s.category + ')').join(', ') : 'None') + \"\\nActive Routines: \" + ($json.userContext.sbsRoutines.length > 0 ? $json.userContext.sbsRoutines.map(r => r.name + ' (system: ' + r.system_name + ', stage: ' + r.current_stage + ')').join(', ') : 'None') + \"\\nGenerate 3 SBS-focused missions that help advance their systems, create new routines, or optimize existing SBS infrastructure. Focus on system building, not generic tasks.\"}]"
            },
            {
              "name": "max_tokens",
              "value": 800
            },
            {
              "name": "temperature",
              "value": 0.8
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "generate_missions_ai",
      "name": "Generate Missions (AI Subflow)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1050, 475]
    },
    {
      "parameters": {
        "jsCode": "// Parse AI subflow response and create SBS-focused missions\nconst response = $json.content || $json.choices?.[0]?.message?.content;\nlet missions = [];\n\ntry {\n  // Try to parse as JSON\n  const parsed = JSON.parse(response);\n  missions = Array.isArray(parsed) ? parsed : [parsed];\n} catch (e) {\n  // Try to extract JSON from markdown code blocks\n  const jsonMatch = response.match(/```json\\s*([\\s\\S]*?)```/);\n  if (jsonMatch) {\n    missions = JSON.parse(jsonMatch[1]);\n  } else {\n    // Try to find JSON array directly\n    const arrayMatch = response.match(/\\[\\s*\\{[\\s\\S]*\\}\\s*\\]/);\n    if (arrayMatch) {\n      missions = JSON.parse(arrayMatch[0]);\n    } else {\n      // Fallback SBS-focused missions if AI parsing fails\n      const userSystems = $('Prepare AI Context').first().json.userContext.sbsSystems;\n      const hasActiveSystems = userSystems && userSystems.length > 0;\n      \n      missions = [\n        {\n          type: 'sbs_system_advancement',\n          title: hasActiveSystems ? `Advance ${userSystems[0].name} System` : 'Create New SBS System',\n          description: hasActiveSystems ? `Move your ${userSystems[0].name} system from ${userSystems[0].current_stage} to the next stage` : 'Design and create a new automated system for an area of your life',\n          target_system_id: hasActiveSystems ? userSystems[0].id : null,\n          system_category: hasActiveSystems ? userSystems[0].category : 'mindset',\n          stage_focus: hasActiveSystems ? (userSystems[0].current_stage === 'define' ? 'design' : 'build') : 'define',\n          xp: 40,\n          coins: 20\n        },\n        {\n          type: 'sbs_routine_creation',\n          title: 'Optimize SBS Routine',\n          description: 'Review and improve one of your system routines for better automation',\n          system_category: 'health',\n          suggested_routine: 'Daily system review and optimization check',\n          xp: 30,\n          coins: 15\n        },\n        {\n          type: 'sbs_system_optimization',\n          title: 'SBS Infrastructure Review',\n          description: 'Analyze your current systems for integration opportunities and efficiency gains',\n          system_category: 'purpose',\n          stage_focus: 'review',\n          xp: 35,\n          coins: 18\n        }\n      ];\n    }\n  }\n}\n\n// Validate and enhance SBS missions\nconst characterId = $('Prepare AI Context').first().json.userContext.characterId;\nconst validatedMissions = missions.slice(0, 3).map((mission, index) => ({\n  characterId: characterId,\n  type: mission.type || 'sbs_system_advancement',\n  title: mission.title || `SBS Mission ${index + 1}`,\n  description: mission.description || 'Work on your System for Building Systems',\n  targetSystemId: mission.target_system_id || mission.targetSystemId || null,\n  suggestedRoutine: mission.suggested_routine || mission.suggestedRoutine || null,\n  systemCategory: mission.system_category || mission.systemCategory || 'general',\n  stageFocus: mission.stage_focus || mission.stageFocus || 'design',\n  xp: Math.min(Math.max(mission.xp || 30, 20), 60),\n  coins: Math.min(Math.max(mission.coins || 15, 10), 30)\n}));\n\nreturn validatedMissions.map(m => ({ json: m }));"
      },
      "id": "parse_ai_response",
      "name": "Parse AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 475]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "is_system_advancement",
              "leftValue": "={{ $json.type }}",
              "rightValue": "sbs_system_advancement",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check_mission_type",
      "name": "Check Mission Type",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1450, 475]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.N8N_WEBHOOK_BASE_URL }}/webhook/system-update",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "system_id",
              "value": "={{ $json.targetSystemId }}"
            },
            {
              "name": "action",
              "value": "ai_suggested_advancement"
            },
            {
              "name": "mission_context",
              "value": "={{ { title: $json.title, description: $json.description, stage_focus: $json.stageFocus } }}"
            }
          ]
        },
        "options": {}
      },
      "id": "trigger_system_advancement",
      "name": "Trigger SBS System Advancement",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1650, 375],
      "continueOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.N8N_WEBHOOK_BASE_URL }}/webhook/create-integrated-system",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "={{ $('Parse AI Response').first().json.characterId }}"
            },
            {
              "name": "system_name",
              "value": "={{ $json.title }}"
            },
            {
              "name": "category",
              "value": "={{ $json.systemCategory }}"
            },
            {
              "name": "purpose",
              "value": "={{ $json.description }}"
            },
            {
              "name": "source",
              "value": "ai_mission"
            }
          ]
        },
        "options": {}
      },
      "id": "create_new_sbs_system",
      "name": "Create New SBS System",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1650, 575],
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO routines (name, system_id, day_of_week, description, status) VALUES ($1, (SELECT id FROM systems WHERE user_id = (SELECT user_id FROM characters WHERE id = $2) AND category = $3 LIMIT 1), 'daily', $4, 'active') RETURNING *",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "parameter": "={{ $json.title }}"
              },
              {
                "parameter": "={{ $json.characterId }}"
              },
              {
                "parameter": "={{ $json.systemCategory }}"
              },
              {
                "parameter": "={{ $json.suggestedRoutine || $json.description }}"
              }
            ]
          }
        }
      },
      "id": "create_sbs_routine",
      "name": "Create SBS Routine",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1850, 525],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/webhook/subflow-trigger-skill-progression",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "system_id",
              "value": "={{ $('Create SBS Routine').item.json.system_id }}"
            },
            {
              "name": "progression_type",
              "value": "ai_mission_completion"
            },
            {
              "name": "source",
              "value": "ai_missions"
            },
            {
              "name": "bonus_xp",
              "value": "={{ $('Parse AI Response').item.json.xp }}"
            }
          ]
        },
        "options": {}
      },
      "id": "trigger_skill_progression",
      "name": "Trigger SBS Skill Progression (Subflow)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2050, 525],
      "continueOnFail": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://localhost:5678/webhook/subflow-achievement-check",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "character_id",
              "value": "={{ $('Parse AI Response').item.json.characterId }}"
            },
            {
              "name": "trigger_source",
              "value": "ai_mission_creation"
            }
          ]
        },
        "options": {}
      },
      "id": "trigger_achievement_check",
      "name": "Trigger SBS Achievement Check",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2250, 525],
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO ai_logs (character_id, message, insight_type) VALUES ($1, $2, 'sbs_mission')",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "parameter": "={{ $('Parse AI Response').item.json.characterId }}"
              },
              {
                "parameter": "=Generated SBS mission: {{ $('Parse AI Response').item.json.title }} (Type: {{ $('Parse AI Response').item.json.type }}, Category: {{ $('Parse AI Response').item.json.systemCategory }})"
              }
            ]
          }
        }
      },
      "id": "log_ai",
      "name": "Log AI Generation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2450, 525],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO events (character_id, event_type, description) VALUES ($1, 'sbs_ai_mission_created', $2)",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "parameter": "={{ $('Parse AI Response').item.json.characterId }}"
              },
              {
                "parameter": "=New SBS AI mission: {{ $('Parse AI Response').item.json.title }} - {{ $('Parse AI Response').item.json.description }} (Type: {{ $('Parse AI Response').item.json.type }})"
              }
            ]
          }
        }
      },
      "id": "log_event",
      "name": "Log Event",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2650, 525],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO systems_log (actor_type, actor_id, target_type, target_id, action, detail, outcome, severity, source) VALUES ('ai_system', 0, 'sbs_mission', $1, 'sbs_mission_generated', $2, 'success', 'info', 'n8n_ai_missions')",
        "options": {
          "queryParameters": {
            "parameters": [
              {
                "parameter": "={{ $('Parse AI Response').item.json.characterId }}"
              },
              {
                "parameter": "={{ JSON.stringify({ characterId: $('Parse AI Response').item.json.characterId, missionType: $('Parse AI Response').item.json.type, missionTitle: $('Parse AI Response').item.json.title, systemCategory: $('Parse AI Response').item.json.systemCategory, stageFocus: $('Parse AI Response').item.json.stageFocus, xp: $('Parse AI Response').item.json.xp, coins: $('Parse AI Response').item.json.coins }) }}"
              }
            ]
          }
        }
      },
      "id": "log_system",
      "name": "Log System",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2850, 525],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "PostgreSQL account"
        }
      }
    }
  ],
  "connections": {
    "Schedule - Daily 6 AM": {
      "main": [
        [
          {
            "node": "Fetch Active Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Users": {
      "main": [
        [
          {
            "node": "Split Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Users": {
      "main": [
        [
          {
            "node": "Fetch Character Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Recent Activity",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Habit Streaks",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Active Projects",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch SBS Routines",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Active SBS Systems",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Character Data": {
      "main": [
        [
          {
            "node": "Prepare AI Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Recent Activity": {
      "main": [
        [
          {
            "node": "Prepare AI Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Habit Streaks": {
      "main": [
        [
          {
            "node": "Prepare AI Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Projects": {
      "main": [
        [
          {
            "node": "Prepare AI Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch SBS Routines": {
      "main": [
        [
          {
            "node": "Prepare AI Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active SBS Systems": {
      "main": [
        [
          {
            "node": "Prepare AI Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare AI Context": {
      "main": [
        [
          {
            "node": "Generate Missions (AI)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Missions (AI)": {
      "main": [
        [
          {
            "node": "Parse AI Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Response": {
      "main": [
        [
          {
            "node": "Check Mission Type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Mission Type": {
      "main": [
        [
          {
            "node": "Trigger SBS System Advancement",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create New SBS System",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger SBS System Advancement": {
      "main": [
        [
          {
            "node": "Create SBS Routine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create New SBS System": {
      "main": [
        [
          {
            "node": "Create SBS Routine",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create SBS Routine": {
      "main": [
        [
          {
            "node": "Trigger SBS Skill Progression",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger SBS Skill Progression": {
      "main": [
        [
          {
            "node": "Trigger SBS Achievement Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger SBS Achievement Check": {
      "main": [
        [
          {
            "node": "Log AI Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log AI Generation": {
      "main": [
        [
          {
            "node": "Log Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Event": {
      "main": [
        [
          {
            "node": "Log System",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log System": {
      "main": [
        [
          {
            "node": "Split Users",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}



